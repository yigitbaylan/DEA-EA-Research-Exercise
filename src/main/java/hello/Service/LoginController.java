package hello.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import hello.Persistence.User;
import hello.Persistence.UserRepository;
import hello.Service.DTO.Login.Authorization;
import hello.Service.DTO.Login.AuthorizationRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;

@RestController
public class LoginController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    // alleen eerste keer aanroepen met in de resources/application properties : spring.jpa.hibernate.ddl-auto=create
    // vervolgens veranderen naar : spring.jpa.hibernate.ddl-auto=none om alleen toegang te hebben tot crud handelingen

    @CrossOrigin
    @PostMapping(value = "/login")
    public ResponseEntity<?> login(@RequestBody AuthorizationRequest authorizationRequest) {
        // This returns a JSON or XML with the users
        Iterable<User> users =  userRepository.findAll();
        Authorization authorization = null;
        Boolean found = false;
        for (User user: users) {
            if (user.getUsername().equals(authorizationRequest.getUser()) && user.getPassword().equals(authorizationRequest.getPassword()))
            {
                found = true;
                String token = generateToken();

                user.setToken(token);

                userRepository.save(user);

                authorization = new Authorization(token, user.getName());

            }
        }

        if(!found) {
            return new ResponseEntity<>(HttpStatus.FORBIDDEN);
        }else {

                return new ResponseEntity<>(authorization, HttpStatus.CREATED);



        }
    }

    public String generateToken() {
        ArrayList<Integer> numbers = new ArrayList <Integer>();
        String token = "";
        for (int i = 0; i <= 2; i++) {
            numbers.add((int) Math.floor(Math.random() * (9999 - 1000) + 1000));
        }
        for (int i = 0; i < numbers.size(); i++) {
            token += numbers.get(i);
            if(i != numbers.size()-1)
                token += "-";
        }

        return token;
    }
}